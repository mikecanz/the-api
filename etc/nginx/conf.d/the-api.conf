# Specify the number of backend servers along with how you want them
# distrbuted. You can use domain name, IP address, port, or unix sockets.
# By default, Nginx uses round robin. Stick with IP addresses and ports.
# See Backend Servers section on how to set up multple instances on one
# machine.

upstream backend {
    server 127.0.0.1:5000;
    #server 127.0.0.1:5001;
    #server 127.0.0.2:5000; 
    #server 127.0.0.2:5001 weight=5;
    #server bobscomputer;
    #server unix:/tmp/starman.pid;
}

server {
    listen         80;
    rewrite        ^ https://$http_host$request_uri? permanent;
}

server {
    listen       443;
    server_name  _;

    ssl                  on;
    ssl_certificate      /etc/pki/tls/certs/localhost.crt;
    ssl_certificate_key  /etc/pki/tls/private/localhost.key;

    ssl_session_timeout  5m;

    ssl_protocols  SSLv2 SSLv3 TLSv1;
    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    ssl_prefer_server_ciphers   on;

    access_log  /var/log/nginx/access_server.log;

    location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|txt|tar|wav|bmp|rtf|js|flv|swf|html|htm)$
    {  
        root /home/ec2-user/the-api/public;
        expires 30d;
    }

    # This is where all magic happens. Everything in this block goes
    # directly to Dancer. What's going on?
    # We set specific headers that L<Plack::Middleware::ReverseProxy>
    # expects. Using this information,
    # it overwrites certain environmental variables with the values we want.
    # When Dancer receives it, 
    # it's as if Dancer is facing the intertubes.
    location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass       http://backend;
    }
}
